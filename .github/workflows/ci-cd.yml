name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: myapp

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: |
          cd myapp
          mvn clean test

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.new_version.outputs.VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Extract version from pom.xml
        id: version
        run: |
          cd myapp
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Update version automatically
        if: github.ref == 'refs/heads/main'
        id: new_version
        run: |
          cd myapp
          # Get current version and increment patch version
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $CURRENT_VERSION"

          # Remove -SNAPSHOT if present
          BASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}

          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$BASE_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          echo "New version: $NEW_VERSION"

          # Update pom.xml with new version
          mvn versions:set -DnewVersion=$NEW_VERSION
          mvn versions:commit

          # Update the output for later steps
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Compile and package
        run: |
          cd myapp
          mvn clean compile package -DskipTests

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: myapp-jar
          path: myapp/target/*.jar
          retention-days: 30

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: myapp-jar
          path: myapp/target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Use version from build job
        id: version
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./myapp
          file: ./myapp/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/myapp:latest
            ${{ secrets.DOCKER_USERNAME }}/myapp:${{ steps.version.outputs.VERSION }}
          platforms: linux/amd64,linux/arm64

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy notification
        run: |
          echo "ðŸš€ Application deployed successfully!"
          echo "Docker image: ${{ secrets.DOCKER_USERNAME }}/myapp:latest"
